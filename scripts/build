#!/usr/bin/env bash

set -euo pipefail

new_build_context() {
    [[ -z "${NEBULA_TASKS_BUILD_DIR}" ]] && fail "NEBULA_TASKS_BUILD_DIR is empty"
    [[ -z "${NEBULA_TASKS_RELEASE_MANIFEST}" ]] && fail "NEBULA_TASKS_RELEASE_MANIFEST is empty"

    printf "creating new build context ${NEBULA_TASKS_BUILD_DIR}\n"

    rm -rf "${NEBULA_TASKS_BUILD_DIR}"
    mkdir -p "${NEBULA_TASKS_BUILD_DIR}"

    docker build -f scripts/Dockerfile.builder -t nebula-task-builder .
}

build_images() {
    local cmd="${1}"

    if [ ! -n "${cmd}" ]; then
        for cmd in ./cmd/*; do
            build_image "${cmd}"
        done
    else
        # if we passed in a name to build, prepend the ./cmd path to it
        build_image "./cmd/${cmd}"
    fi
}

build_image() {
    local cmd="${1}"
    local command_name="$(basename "${cmd}")"

    printf "building ${command_name}\n"

    source "${cmd}"/build-info.sh

    docker_file="${NEBULA_TASKS_BUILD_DIR}"/Dockerfile."${command_name}"
    include=scripts/Dockerfile.include
    if [ -f "${cmd}"/Dockerfile.include ]; then
        include="${cmd}"/Dockerfile.include
    fi

    cp scripts/Dockerfile.template "${docker_file}"
    cat "${include}" >> "${docker_file}"

    sed -i.bak -e "s|__OUTPUTBIN__|${command_name}|g" "${docker_file}"
    sed -i.bak -e "s|__GOMAIN__|./cmd/${command_name}|g" "${docker_file}"
    sed -i.bak -e "s|__DOCKER_CMD__|${DOCKER_CMD}|g" "${docker_file}"

    docker build -f "${docker_file}" -t "${DOCKER_REPO}:${VERSION}" .

    rm "${docker_file}"

    echo "${DOCKER_REPO}:${VERSION}" >> "${NEBULA_TASKS_RELEASE_MANIFEST}"
}

# this ensures that we are in the correct directory context
cd "$(dirname "$0")"/..

new_build_context
build_images "$*"
