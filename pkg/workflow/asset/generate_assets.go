// Code generated by vfsgen; DO NOT EDIT.

package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// assets statically implements the virtual filesystem provided to vfsgen.
var assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/schemas": &vfsgen۰DirInfo{
			name:    "schemas",
			modTime: time.Time{},
		},
		"/schemas/v1": &vfsgen۰DirInfo{
			name:    "v1",
			modTime: time.Time{},
		},
		"/schemas/v1/Workflow.json": &vfsgen۰CompressedFileInfo{
			name:             "Workflow.json",
			modTime:          time.Time{},
			uncompressedSize: 6230,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x4d\x6f\xdb\x38\x13\xbe\xfb\x57\x0c\xd4\x1e\x93\xd7\x6f\x4f\x0b\xe4\x96\xb6\x5b\xa0\xc0\x2e\x12\x20\xdd\xed\x61\x91\x03\x2d\x8e\x2c\xd6\x12\xa9\x92\x94\x13\x23\xf0\x7f\x5f\x90\x94\x68\x51\xa2\x5c\x4b\x4a\xb0\x3d\x34\x16\xc5\x99\x79\xf8\xcc\xa7\xf8\xb2\x02\x48\xde\xab\x34\xc7\x92\x24\x37\x90\xe4\x5a\x57\x37\xeb\xf5\x0f\x25\xf8\xb5\x5b\xfd\x9f\x90\xdb\x35\x95\x24\xd3\xd7\xff\xff\x6d\xed\xd6\xde\x25\x57\x46\x4e\x33\x5d\xa0\x91\xfa\x2e\xe4\x2e\x2b\xc4\x93\x5b\xa6\xa8\x52\xc9\x2a\xcd\x04\x37\x2f\x6f\xe1\xa9\x79\x0d\x14\x33\xc6\x99\x7d\xe1\x14\x1c\x2a\x2b\x2f\x36\x3f\x30\xd5\x6e\xad\x92\xa2\x42\xa9\x19\xaa\xe4\x06\x0c\x3c\x80\x84\x54\xec\x6f\x94\xca\x29\x74\x6b\x1d\x69\xa5\x25\xe3\x5b\x2b\x6d\xd7\x7b\xf6\xbf\xe5\x78\x42\xe0\xf0\xc3\xbe\xd1\xe6\x65\x90\xd7\x65\x72\x03\xff\x34\xcf\x00\xc9\xfe\x43\xd2\x3c\x3c\xda\xbf\x47\xb7\x37\xd9\x31\x4e\x5f\x09\x85\x15\x3d\x03\xc1\xd3\x1a\x05\x12\x1a\x98\x8a\xe7\x96\x83\xb0\x0f\xa4\x80\x5a\xa1\xbc\xae\xa4\xd8\x33\x8a\xb4\xeb\xad\x93\x44\x60\xb9\x22\x92\x94\xa8\x51\xaa\x98\xe1\x8e\x33\x9d\xf3\x28\x65\xce\xd0\xfd\xd0\xb5\x76\xc7\x7b\x89\x99\x91\x7c\xb7\x3e\x05\x88\x5a\xdf\xb7\x56\xda\xe3\x1f\x03\x10\x4a\x63\x15\xb5\x4f\xa4\x24\x87\xd1\x73\xff\xc1\x94\x06\x91\x75\x7c\x61\xf5\xf8\xed\x25\xe3\x5f\x35\x96\x46\xf3\x07\xbf\xc8\x9a\x95\x5f\x62\x7e\xd0\x58\xc5\xe1\x6a\xc9\xb6\xdb\x11\xc6\x26\x22\xf6\xaa\xa6\xe3\xfb\xe6\x44\x7b\x10\x57\x0d\xcc\x44\xe2\xcf\x9a\x49\xa4\x3e\x0c\x1b\x96\x57\x00\x8f\x4d\x6a\x7b\x5d\xa7\xec\x7c\xb0\xd1\xfc\x85\x61\x11\x4d\x8c\x7e\x3c\x0c\xca\x43\xbb\x20\xa4\x39\xa6\x11\xa3\xc0\x78\x26\x64\x49\x74\x90\xa4\x91\xd2\xd0\xb5\x74\x5a\x19\x4f\x83\x38\x82\x3d\x29\x6a\x74\xe9\xe8\xf7\x1d\x5b\x8e\xbc\xf9\x2e\x3b\x4e\x7f\x98\x90\xbf\x3f\x57\x12\x55\xbf\x4a\x0d\xf3\x0e\xfd\x3e\x40\x63\x99\x68\xa4\xb0\x39\x80\xce\x11\x36\x24\xdd\x21\xa7\x61\xbe\x9d\x32\x61\x0e\xbd\x3e\x6e\x7c\xda\xf6\xeb\xf0\x59\x72\x29\x66\xa4\x2e\x74\x9f\xdf\x9e\x99\xcf\x6e\x57\xc7\x86\xe5\xb4\x43\xe7\xd5\x6a\x44\x76\xae\xdb\xee\xda\xf2\xd5\x3d\x57\xaf\x62\x05\x8e\x0c\x38\xb5\x99\xba\x88\x4e\x93\x1a\x93\x98\xe4\xa4\x5c\x12\xa6\x7f\x71\xf6\xb3\xc6\x9e\x7d\xab\x73\x84\xe4\x0a\x39\x55\x77\x03\x8a\x7b\x6a\x1f\xdc\x31\xcc\x66\xe4\xa9\x01\x1d\x80\x10\x1c\xef\xb2\xa0\x2d\x99\x7f\x2f\xc1\xd3\xf0\x1c\xc1\xeb\xe3\xd5\x65\xb2\x61\x19\xf4\xaf\x87\xc5\xed\x22\xab\x27\xc7\x0f\x9f\x1e\x2f\xcc\xf2\x9e\xef\xda\x36\xec\xf7\x0e\xc9\x79\x19\xab\xbc\x9f\x04\xd7\x84\x71\x94\x36\xf0\xba\x9c\x8c\x8a\xdc\x56\xa6\x27\x93\xa2\x91\x88\x0e\x01\x5e\xed\x9f\xec\x99\x05\x75\x67\x2c\x0a\x59\x49\xb6\x4b\xc2\xf0\xb3\x48\x77\x28\xc1\xaa\x81\x4c\x48\x17\x87\xf8\x8c\x69\xdd\xcb\xbb\x4e\x30\xa6\xa2\x2c\x49\x30\x37\x4d\x35\xfb\xc9\x69\x00\x2d\x80\x29\x35\x56\x59\x88\xdc\xf6\x43\xe5\x4c\x78\x8d\xd9\x20\x72\x5b\x97\xc8\x75\x2f\x15\xe2\x81\x78\x26\x08\x8f\x51\x8c\x8c\x57\xb5\xfe\xc2\x8a\x25\x4e\x30\xd3\xa4\xc4\x82\x68\xb6\x47\xa8\x88\xce\x0d\x2f\x84\x43\xc6\x0a\x34\x3f\x6b\xe5\x7c\x63\x5a\x8a\xb5\x07\x4e\x3c\xce\x9a\xdd\x31\x9f\xb6\xaf\x1d\x03\xc6\xb8\x8b\x05\x7c\x3d\xf2\x2e\xcc\x51\x17\xd9\xe7\xd3\xa4\x5f\xf6\xa7\x8c\x14\xa9\xe0\xca\xd0\x64\x7e\x38\x6d\xe7\xa6\x05\x52\x14\x93\x6b\x83\x4b\xe2\x91\x54\x0f\xca\xc1\xd2\x23\x90\x46\xd9\x92\x79\xa7\x1d\x26\x17\x75\xd1\x66\x98\xfd\x2f\x1b\x69\x0b\x61\xbc\x97\x2a\x51\xcb\x74\x60\xf2\xec\x88\xfd\xe0\x44\xa2\xea\x36\x8c\x53\x03\x72\x8a\xbe\x8f\x8d\x4c\x54\xe1\x53\x8e\x83\x36\x1f\xd7\xd6\x99\x51\xe7\xf5\xc0\x21\x2b\xd1\x60\x0d\x59\x78\x95\x08\x71\xe6\xa2\x81\x32\xa1\x0f\x9b\x8f\x15\x5a\x17\x18\x02\xbc\xa8\x1f\xdf\xd7\x2a\x9f\x21\xf6\x1d\x37\xb9\x10\xbb\xbe\x64\x94\xb6\x38\xba\x39\xf4\xa9\x46\xd3\x25\xf4\xcd\xaa\x20\xad\x81\x91\x8c\x69\xdf\x2e\xeb\x71\x99\x89\x44\xe4\xe9\xc1\xf6\x7d\xbe\x17\x3b\x04\x9d\x33\xe5\x4f\xd5\x7c\x4b\xd9\x2f\x46\xdb\xed\x52\x29\x38\xa8\x03\xd7\xe4\x79\x7a\x84\x07\x17\x32\x30\x3c\x63\xe8\xac\x61\x3c\xcc\x71\x54\x55\xab\xfc\xcd\x9c\x64\x94\x8f\x3b\xc8\x5e\xf9\x45\xdd\xd3\x43\x1d\x45\xde\xb9\x40\x6a\xef\xb3\x04\xa0\xf9\x6e\x4f\x11\x8c\x13\xea\x4d\xc9\xb4\xf9\xb6\xc5\x3d\x72\x0d\x94\x68\x12\x6a\xfc\xe5\xcd\x10\x9c\xb9\x69\xe9\x5c\x3a\x2c\x9a\x1a\xba\x5f\xfd\xa1\x7f\xa3\x89\x3b\xab\x94\x39\x45\x6f\xe6\xe5\x46\xff\x5b\x4f\x23\x53\x07\x83\x8f\x83\x36\x77\x39\x65\x2d\x55\x4d\xab\x9c\xc4\xd5\x0e\x0f\x4b\x6e\x83\x3a\x71\xbd\xc3\x83\x47\x60\xa6\x6a\x3b\x38\x14\x07\x60\x14\xb9\x66\xd9\xc1\x8c\xdc\x36\xb8\xe3\x39\x16\xbd\x27\x3d\xc7\x43\x0c\x8f\xbf\xfc\x69\x91\xa8\x76\xc0\x37\x5d\xbf\x25\xca\xdd\x20\x79\x38\xaf\x96\x66\xb1\x79\x21\x9a\x65\xab\xf6\xff\xe3\xea\xb8\xfa\x37\x00\x00\xff\xff\x5d\x8a\xa2\x7c\x56\x18\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schemas"].(os.FileInfo),
	}
	fs["/schemas"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schemas/v1"].(os.FileInfo),
	}
	fs["/schemas/v1"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schemas/v1/Workflow.json"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
