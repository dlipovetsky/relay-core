// Code generated by vfsgen; DO NOT EDIT.

package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// assets statically implements the virtual filesystem provided to vfsgen.
var assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/schemas": &vfsgen۰DirInfo{
			name:    "schemas",
			modTime: time.Time{},
		},
		"/schemas/v1": &vfsgen۰DirInfo{
			name:    "v1",
			modTime: time.Time{},
		},
		"/schemas/v1/Workflow.json": &vfsgen۰CompressedFileInfo{
			name:             "Workflow.json",
			modTime:          time.Time{},
			uncompressedSize: 7032,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x4d\x6f\xdb\x38\x13\xbe\xfb\x57\x0c\xd4\x02\xef\xa5\x79\xbd\x3d\x2d\x90\x5b\xda\x6e\x81\x02\x5d\xb4\x68\xda\xed\xa1\xe8\x81\x96\x46\x16\x6b\x8a\x64\x49\xca\x89\x11\xf8\xbf\x2f\x48\x4a\xb2\x28\x51\x8a\x25\x27\xd8\x1c\x92\x48\xe2\xcc\x3c\x7c\xe6\x93\x7c\x58\x01\x24\x2f\x75\x5a\x60\x49\x92\x6b\x48\x0a\x63\xe4\xf5\x7a\xfd\x4b\x0b\x7e\xe5\xdf\xfe\x5f\xa8\xed\x3a\x53\x24\x37\x57\x7f\xfc\xb9\xf6\xef\x5e\x24\xaf\xac\x9c\xa1\x86\xa1\x95\xfa\x2e\xd4\x2e\x67\xe2\xce\xbf\xce\x50\xa7\x8a\x4a\x43\x05\xb7\x1f\x6f\xe0\xae\xfe\x0c\x19\xe6\x94\x53\xf7\xc1\x2b\x38\x48\x27\x2f\x36\xbf\x30\x35\xfe\x9d\x54\x42\xa2\x32\x14\x75\x72\x0d\x16\x1e\x40\x42\x24\xfd\x07\x95\xf6\x0a\xfd\xbb\x8e\xb4\x36\x8a\xf2\xad\x93\x76\xef\x7b\xf6\xbf\x16\x78\x42\xe0\xf1\xc3\xbe\xd6\xd6\xca\x20\xaf\xca\xe4\x1a\x7e\xd4\xcf\x00\xc9\xfe\x75\x52\x3f\xfc\x74\x7f\x8f\x7e\x6d\xb2\xa3\x3c\x7b\x22\x14\x4e\x74\x02\x42\x4b\x6b\x14\x08\x27\x25\x2e\x00\x72\xc3\x41\xb8\x07\xc2\xc0\xaa\x80\x5c\x28\x30\x1d\x74\x49\x60\x45\x57\x65\x49\xd4\x61\x89\x21\x28\xe8\xb6\xb8\x62\xb8\x47\x06\xb2\x50\x44\x23\xf8\x25\x1b\xca\xb7\x70\x57\x10\x13\xd8\x85\x4c\xa0\x0e\x8d\x87\x1a\xe7\x03\x28\x85\xb2\x36\x0d\xa1\x0c\x33\xe8\x7c\x06\x91\x4f\xec\xb9\x10\x25\x4a\xb2\xbd\x94\xdd\x6f\x5f\x3e\x82\x11\x40\xe0\x0e\x37\x9a\x9a\x08\xd3\xad\x96\x5c\xa8\x92\x18\xab\xa0\x52\xb4\xe7\x00\x51\xa9\xf4\x89\xa0\x74\x8d\xff\x4f\x03\xa9\x4c\x21\x14\x35\xc4\xd0\x3d\x82\x37\x04\xa9\xc8\x10\x98\x48\x89\x09\x12\x64\x02\xa1\x21\x5b\x1d\xc3\x47\x94\x22\x87\xb3\xe0\x31\xaa\x8d\x75\x49\xae\x10\xaf\xac\x25\x60\x64\x83\x4c\x5b\xcc\x05\x32\x09\x12\x85\x64\x08\x39\xe5\xd9\x08\x83\xd4\x60\xd9\x45\x31\xe4\xa9\xfe\x70\x0c\xb0\xdb\x8d\xb2\x28\xfa\x4e\x4d\x8a\xc1\xff\x82\x95\x26\x1b\x8b\xa9\xc5\x9c\x11\x43\x40\x4b\x4c\x69\x4e\x53\x4f\x37\xd5\x23\x21\x26\x89\x22\x25\x1a\x54\x67\xd9\x26\x59\x46\x3d\x55\x9f\x87\xd5\xd1\xad\x78\xa9\x30\xb7\x92\x2f\xd6\xa7\x1a\xab\xd7\x9f\x1b\x2b\xf1\xcd\x6b\x83\x72\x81\xe7\x3e\xd6\xde\x3a\x95\x33\xa7\xa7\x5d\x5e\x52\xfe\xa1\xf6\xc6\xeb\x29\xff\xc4\x31\xdf\x1a\x94\x71\xb8\x46\xd1\xed\x76\x84\xb1\x99\x88\x5b\x55\xf3\xf1\x7d\xf5\xa2\x3d\x88\xab\x1a\x66\xd2\x59\x7a\xea\x5f\xb7\xae\xde\xbf\xa7\xc8\xa2\xad\xe3\x91\x50\xbb\x69\x2b\x97\x50\xae\x70\x1d\x24\x66\x40\xb9\x4f\xc9\x20\x4b\x23\xcd\xb3\x6b\xe9\xf4\x66\xbc\x8c\xc4\x11\xec\x09\xab\xd0\x37\xac\x76\xdd\xb1\xa1\xa0\x35\xaf\xf0\x77\x45\x15\xda\x4d\xfe\xf0\xfa\xc3\x96\xf5\xd7\xbd\x54\xa8\xfb\x7d\x7c\x58\x18\xb0\x5d\x07\x68\x2d\x13\x83\x19\x6c\x0e\x2e\xf5\x37\x24\xdd\x21\xcf\xc2\x74\x3a\x05\xfa\x12\x7a\xdb\xb0\x68\xb3\xb2\x3f\xa9\x4c\x92\x9b\x61\x4e\x2a\x66\xfa\xfc\xf6\xcc\xbc\xf3\xab\x3a\x36\x1c\xa7\x1d\x3a\x5f\xad\x46\x64\x97\xba\xed\x53\x53\x5f\xbb\xfb\x3a\xad\x18\x3a\x32\xe0\xd4\x25\xe2\x45\x74\xda\xba\x30\x8b\xc9\xde\x48\x33\x77\xbf\xdf\x38\xfd\x5d\x61\xcf\xbe\xd3\x39\x42\xb2\x44\x9e\xe9\x4f\x03\x8a\x7b\x6a\x6f\xfd\x36\xec\x62\xe4\xa9\x05\x1d\x80\x10\x1c\x3f\xe5\xc1\xe0\x66\x7f\x1e\x82\xa7\xd1\x6e\x34\x40\x35\x29\x1b\x56\xb9\xf6\xf3\xb0\x76\x9d\x65\xf5\xe4\xf8\xe1\xd3\xcf\x33\xb3\xbc\xe7\xbb\x66\x50\x6d\xd7\x0e\xc9\x79\x18\x2b\xac\x6f\x05\x37\x84\x72\x54\x2e\xf0\xba\x9c\x8c\x8a\xdc\x48\xa9\xc4\x9e\xb0\x5a\x22\x3a\x26\xb7\x6a\xff\xa6\xf7\x34\xa8\x3b\x63\x51\x48\xcb\x70\xf6\x8b\x11\x39\x15\x86\xef\x44\xba\x43\x05\x4e\x8d\x9b\xf9\x5c\x1c\xe2\x3d\xa6\x55\x2f\xef\x3a\xc1\x98\x8a\xb2\x24\xc1\xc9\x62\xae\xd9\xb7\x5e\x83\x1d\x3c\xa8\xd6\x63\x95\x85\xa8\x6d\x3f\x54\x26\xc2\x6b\xcc\x06\x51\xdb\xaa\x44\x6e\x7a\xa9\x10\x0f\xc4\x89\x20\x3c\x46\x31\x52\x2e\x2b\xf3\x9e\xb2\x4b\x9c\x60\xcf\x5b\x0a\x99\x1f\x6d\x25\x31\x85\x1b\xc5\x39\xe4\x94\xa1\xfd\xb7\xd2\xa7\x79\xdc\xd9\x03\x2f\x1e\x67\xcd\xad\x58\x4e\xdb\x87\x8e\x01\x6b\xdc\xc7\x02\x3e\x1d\x79\x67\xe6\xa8\x8f\xec\xe9\x34\xe9\x97\xfd\x39\x23\x45\x2a\xb8\x76\x67\x84\xb4\xd1\x36\x35\x2d\x10\xc6\x66\xd7\x06\x9f\xc4\x23\xa9\x1e\x94\x83\x4b\xb7\x40\x6a\x65\x97\xcc\x3b\xcd\xac\x78\x51\x17\xad\x67\xd5\xff\xb2\x91\x36\x10\xc6\x7b\xe9\xe0\x94\x0a\x8f\x4e\xd0\xb7\x5e\x24\xaa\x6e\x43\x79\x66\x41\xce\xd1\xf7\xa6\x96\x89\x2a\xbc\x2b\x70\xd0\xe6\xe3\xda\x3a\x33\xea\xb2\x1e\x38\x64\x25\x1a\xac\x21\x0b\x4f\x12\x21\xf5\x09\x3e\x16\x28\x33\xfa\xb0\x3d\xac\x64\x15\xc3\x10\xe0\x59\xfd\xf8\x73\xa5\x8b\x05\x62\xdf\x71\x53\x08\xb1\xeb\x4b\x46\x69\x8b\xa3\x5b\x42\x9f\xae\x35\x9d\x43\xdf\xa2\x0a\xd2\x18\x18\xc9\x98\xe6\xeb\x65\x3d\x2e\xb7\x91\x88\x3c\x3d\xb8\xbe\xcf\xf7\x62\x87\xfe\xde\xa1\xd9\x55\x7d\x96\x72\x27\x46\xd7\xed\x52\x25\x38\xe8\x03\x37\xe4\x7e\x7e\x84\x07\x57\x96\x30\xdc\x63\xe8\xac\x61\x3c\x2c\x71\x94\xac\x74\xf1\x6c\x4e\xb2\xca\xc7\x1d\xe4\x2e\xc5\xa3\xee\xe9\xa1\x8e\x22\xef\xdc\x70\x35\x37\xbe\x02\xd0\x9e\xdb\x53\x04\xeb\x84\x6a\x53\x52\x63\xcf\xb6\xb8\x47\x6e\xdc\x05\x52\xa8\xf1\xd1\x8b\x1f\x98\xb8\x48\xe9\x5c\x3a\x5c\x34\x35\x74\x4f\xfd\xa1\x7f\xa3\x89\xbb\xa8\x94\x79\x45\xcf\xe6\xe5\x5a\xff\x73\x4f\x23\x73\x07\x83\x37\x83\x36\x77\x3e\x65\x0d\x55\x75\xab\x9c\xc5\xd5\x0e\x0f\x97\xdc\x06\x75\xe2\x7a\x87\x87\x16\x81\x9d\xaa\xdd\xe0\xc0\x0e\x40\x33\xe4\x86\xe6\x07\x3b\x72\xbb\xe0\x8e\xe7\x58\xf4\x1a\x74\x8a\x87\x18\x9e\xf6\xf2\xa7\x41\xa2\x9b\x01\xdf\x76\xfd\x86\x28\x7f\x83\xd4\xc2\x79\xb2\x34\x8b\xcd\x0b\xd1\x2c\x5b\x35\xbf\x8f\xab\xe3\xea\xdf\x00\x00\x00\xff\xff\x68\x92\xbe\x65\x78\x1b\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schemas"].(os.FileInfo),
	}
	fs["/schemas"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schemas/v1"].(os.FileInfo),
	}
	fs["/schemas/v1"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schemas/v1/Workflow.json"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
