// Code generated by vfsgen; DO NOT EDIT.

package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// assets statically implements the virtual filesystem provided to vfsgen.
var assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/schemas": &vfsgen۰DirInfo{
			name:    "schemas",
			modTime: time.Time{},
		},
		"/schemas/v1": &vfsgen۰DirInfo{
			name:    "v1",
			modTime: time.Time{},
		},
		"/schemas/v1/Workflow.json": &vfsgen۰CompressedFileInfo{
			name:             "Workflow.json",
			modTime:          time.Time{},
			uncompressedSize: 6062,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\xcd\x6e\xdb\x38\x10\xbe\xfb\x29\x06\x6a\x8f\xc9\x7a\x7b\x5a\x20\xb7\xb4\xdd\x02\x05\x76\x91\x00\xe9\x6e\x0f\x8b\x1c\x68\x69\x64\xb1\x96\x48\x95\xa4\x9c\x04\x81\xdf\x7d\x41\x52\x92\x49\x8a\x72\x2c\x29\x41\x0b\x14\xb1\x28\xce\x0f\xbf\xf9\xe6\x47\x7c\x5e\x01\x24\xef\x65\x5a\x60\x45\x92\x2b\x48\x0a\xa5\xea\xab\xf5\xfa\x87\xe4\xec\xd2\xae\xfe\xc6\xc5\x76\x9d\x09\x92\xab\xcb\xdf\xff\x58\xdb\xb5\x77\xc9\x85\x96\x53\x54\x95\xa8\xa5\xbe\x73\xb1\xcb\x4b\xfe\x60\x97\x33\x94\xa9\xa0\xb5\xa2\x9c\xe9\x97\xd7\xf0\xd0\xbe\x86\x0c\x73\xca\xa8\x79\x61\x15\x3c\xd5\x46\x9e\x6f\x7e\x60\xaa\xec\x5a\x2d\x78\x8d\x42\x51\x94\xc9\x15\x68\xf7\x00\x12\x52\xd3\x7f\x51\x48\xab\xd0\xae\x39\xd2\x52\x09\xca\xb6\x46\xda\xac\x07\xf6\xbf\x15\x78\xf4\xc0\xfa\x0f\xfb\x56\x5b\x2f\x83\xac\xa9\x92\x2b\xf8\xaf\x7d\x06\x48\xf6\x1f\x92\xf6\xe1\xde\xfc\x3d\xd8\xbd\xc9\x8e\xb2\xec\x95\xbc\x30\xa2\x27\x5c\xe8\x61\x8d\x3a\xe2\x1b\x98\xea\xcf\x35\x03\x6e\x1e\x48\x09\x8d\x44\x71\x59\x0b\xbe\xa7\x19\x66\x6e\xb4\x8e\x12\x9e\xe5\x9a\x08\x52\xa1\x42\x21\x63\x86\x9d\x60\xda\xe0\x65\x19\xb5\x86\x6e\x87\xa1\x35\x3b\xde\x0b\xcc\xb5\xe4\xbb\xf5\x91\x20\x72\x7d\xdb\x59\xe9\x8e\x7f\xf0\x9c\x90\x0a\xeb\xa8\x7d\x22\x04\x79\x1a\x3d\xf7\x5f\x54\x2a\xe0\xb9\x13\x0b\xa3\xa7\xdf\x5e\x51\xf6\x55\x61\xa5\x35\x7f\xe8\x17\x69\xbb\xf2\xa2\xcf\x77\x0a\xeb\xb8\xbb\x4a\xd0\xed\x76\x04\xb1\x89\x1e\xf7\xaa\xa6\xfb\xf7\xcd\x8a\x06\x2e\xae\x5a\x37\x13\x81\x3f\x1b\x2a\x30\xeb\x69\xd8\xa2\xbc\x02\xb8\x6f\x53\xbb\xd7\x75\xcc\xce\x3b\xc3\xe6\x2f\x14\xcb\x68\x62\x84\x7c\x18\x94\x87\x6e\x81\x0b\x7d\x4c\x2d\x96\x01\x65\x39\x17\x15\x51\x5e\x92\x46\x4a\x83\x6b\xe9\xb8\x32\x9e\x06\x71\x0f\xf6\xa4\x6c\xd0\xa6\x63\xbf\xef\xd0\x61\xd4\x9b\x77\xd1\xb1\xfa\xfd\x84\xfc\xf3\xb1\x16\x28\xc3\x2a\x35\xcc\x3b\xec\xf7\x01\x6a\xcb\x44\x61\x06\x9b\x27\x50\x05\xc2\x86\xa4\x3b\x64\x99\x9f\x6f\xc7\x4c\x98\x03\x6f\xcf\x9b\x3e\x6d\xc3\x3a\x7c\x12\xdc\x0c\x73\xd2\x94\x2a\xc4\x37\x30\xf3\xd9\xee\x72\x6c\x18\x4c\x1d\x38\x2f\x56\x23\xb2\x73\xc3\x76\xd3\x95\x2f\xf7\x5c\x41\xc5\xf2\x02\xe9\x61\x6a\x32\x75\x11\x9c\x3a\x35\x26\x21\xc9\x48\xb5\x84\xa6\xff\x30\xfa\xb3\xc1\xc0\xbe\xd1\x39\x02\x72\x8d\x2c\x93\x37\x03\x88\x03\xb5\x77\xf6\x18\x7a\x33\xb2\x54\x3b\xed\x39\xc1\x19\xde\xe4\x5e\x5b\xd2\xff\x9e\xbd\xa7\xe1\x39\xbc\xd7\x87\x8b\xf3\x64\xfd\x32\xd8\xbf\x1e\x16\xb7\xb3\xac\x1e\x03\x3f\x7c\xba\x3f\x33\xcb\x83\xd8\x75\x6d\xb8\xdf\x3b\x04\xe7\x79\xac\xf2\x7e\xe2\x4c\x11\xca\x50\x18\xe2\xb9\x98\x8c\x8a\x5c\xd7\xba\x27\x93\xb2\x95\x88\x0e\x01\xbd\xda\xbf\xe9\x23\xf5\xea\xce\x18\x0b\x69\x45\xb6\x4b\x68\xf8\x99\xa7\x3b\x14\x60\xd4\x40\xce\x85\xe5\x21\x3e\x62\xda\x04\x79\xe7\x90\x31\xe5\x55\x45\xbc\xb9\x69\xaa\xd9\x4f\x56\x03\x28\x0e\x54\xca\xb1\xca\x42\xc4\x36\xa4\xca\x09\x7a\x8d\xd9\x20\x62\xdb\x54\xc8\x54\x90\x0a\x71\x22\x9e\x20\xe1\x21\xea\x23\x65\x75\xa3\xbe\xd0\x72\x49\x10\xf4\x34\x29\xb0\x24\x8a\xee\x11\x6a\xa2\x0a\x8d\x0b\x61\x90\xd3\x12\xf5\xcf\x46\xda\xd8\xe8\x96\x62\xec\x81\x15\x8f\xa3\x66\x76\xcc\x87\xed\xab\x63\x40\x1b\xb7\x5c\xc0\xd7\x03\xef\xcc\x1c\xb5\xcc\x3e\x9d\x26\x61\xd9\x9f\x32\x52\xa4\x9c\x49\x0d\x93\xfe\x61\xb5\x9d\x9a\x16\x48\x59\x4e\xae\x0d\x36\x89\x47\x52\xdd\x2b\x07\x4b\x8f\x40\x5a\x65\x4b\xe6\x9d\x6e\x98\x5c\xd4\x45\xdb\x61\xf6\x57\x36\xd2\xce\x85\xf1\x5e\x2a\x79\x23\xd2\x81\xc9\x93\x23\xf6\x9d\x15\x89\xaa\xdb\x50\x96\x69\x27\xa7\xe8\xfb\xd8\xca\x44\x15\x3e\x14\x38\x68\xf3\x71\x6d\xce\x8c\x3a\xaf\x07\x0e\x51\x89\x92\xd5\x47\xe1\x55\x18\x62\xcd\x45\x89\x32\xa1\x0f\xeb\x8f\x95\xac\x29\xd1\x77\xf0\xac\x7e\x7c\xdb\xc8\x62\x86\xd8\x77\xdc\x14\x9c\xef\x42\xc9\x28\x6c\x71\xef\xe6\xc0\x27\x5b\x4d\xe7\xc0\x37\xab\x82\x74\x06\x46\x32\xa6\x7b\xbb\xac\xc7\xe5\x9a\x89\xc8\xd2\x27\xd3\xf7\xd9\x9e\xef\x10\x54\x41\x65\x7f\xaa\xf6\x5b\xca\x7c\x31\x9a\x6e\x97\x0a\xce\x40\x3e\x31\x45\x1e\xa7\x33\xdc\xbb\x90\x81\xe1\x19\xfd\x60\x0d\xf9\x30\x27\x50\x75\x23\x8b\x37\x0b\x92\x56\x3e\x1e\x20\x73\xe5\x17\x0d\x4f\xe0\x75\xd4\x73\xe7\x02\xa9\xbb\xcf\xe2\x80\xfa\xbb\x3d\x45\xd0\x41\x68\x36\x15\x55\xfa\xdb\x16\xf7\xc8\x14\x64\x44\x11\x5f\xe3\x8b\x37\x43\x70\xe2\xa6\xc5\xb9\x74\x58\x34\x35\xb8\x5f\xfd\x7e\x7c\xa3\x89\x3b\xab\x94\x59\x45\x6f\x16\xe5\x56\xff\x5b\x4f\x23\x53\x07\x83\x8f\x83\x36\x77\x3e\x64\x1d\x54\x6d\xab\x9c\x84\x55\xf4\x7a\xf2\x45\x7a\x2f\x21\x63\xac\xab\xce\xe1\xa2\xe3\xb9\xcf\xc8\x95\xfe\x7f\x58\xfd\x1f\x00\x00\xff\xff\xb0\xf1\x28\x7a\xae\x17\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schemas"].(os.FileInfo),
	}
	fs["/schemas"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schemas/v1"].(os.FileInfo),
	}
	fs["/schemas/v1"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schemas/v1/Workflow.json"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
