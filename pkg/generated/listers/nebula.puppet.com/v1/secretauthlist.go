/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/puppetlabs/nebula-tasks/pkg/apis/nebula.puppet.com/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SecretAuthListLister helps list SecretAuthLists.
type SecretAuthListLister interface {
	// List lists all SecretAuthLists in the indexer.
	List(selector labels.Selector) (ret []*v1.SecretAuthList, err error)
	// SecretAuthLists returns an object that can list and get SecretAuthLists.
	SecretAuthLists(namespace string) SecretAuthListNamespaceLister
	SecretAuthListListerExpansion
}

// secretAuthListLister implements the SecretAuthListLister interface.
type secretAuthListLister struct {
	indexer cache.Indexer
}

// NewSecretAuthListLister returns a new SecretAuthListLister.
func NewSecretAuthListLister(indexer cache.Indexer) SecretAuthListLister {
	return &secretAuthListLister{indexer: indexer}
}

// List lists all SecretAuthLists in the indexer.
func (s *secretAuthListLister) List(selector labels.Selector) (ret []*v1.SecretAuthList, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SecretAuthList))
	})
	return ret, err
}

// SecretAuthLists returns an object that can list and get SecretAuthLists.
func (s *secretAuthListLister) SecretAuthLists(namespace string) SecretAuthListNamespaceLister {
	return secretAuthListNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SecretAuthListNamespaceLister helps list and get SecretAuthLists.
type SecretAuthListNamespaceLister interface {
	// List lists all SecretAuthLists in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.SecretAuthList, err error)
	// Get retrieves the SecretAuthList from the indexer for a given namespace and name.
	Get(name string) (*v1.SecretAuthList, error)
	SecretAuthListNamespaceListerExpansion
}

// secretAuthListNamespaceLister implements the SecretAuthListNamespaceLister
// interface.
type secretAuthListNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SecretAuthLists in the indexer for a given namespace.
func (s secretAuthListNamespaceLister) List(selector labels.Selector) (ret []*v1.SecretAuthList, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SecretAuthList))
	})
	return ret, err
}

// Get retrieves the SecretAuthList from the indexer for a given namespace and name.
func (s secretAuthListNamespaceLister) Get(name string) (*v1.SecretAuthList, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("secretauthlist"), name)
	}
	return obj.(*v1.SecretAuthList), nil
}
