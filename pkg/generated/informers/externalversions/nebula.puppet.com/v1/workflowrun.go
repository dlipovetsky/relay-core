/*
Copyright (c) Puppet, Inc.
*/

// Code generated by informer-gen. DO NOT EDIT.

package v1

import (
	time "time"

	nebulapuppetcomv1 "github.com/puppetlabs/nebula-tasks/pkg/apis/nebula.puppet.com/v1"
	versioned "github.com/puppetlabs/nebula-tasks/pkg/generated/clientset/versioned"
	internalinterfaces "github.com/puppetlabs/nebula-tasks/pkg/generated/informers/externalversions/internalinterfaces"
	v1 "github.com/puppetlabs/nebula-tasks/pkg/generated/listers/nebula.puppet.com/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// WorkflowRunInformer provides access to a shared informer and lister for
// WorkflowRuns.
type WorkflowRunInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1.WorkflowRunLister
}

type workflowRunInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewWorkflowRunInformer constructs a new informer for WorkflowRun type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewWorkflowRunInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredWorkflowRunInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredWorkflowRunInformer constructs a new informer for WorkflowRun type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredWorkflowRunInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.NebulaV1().WorkflowRuns(namespace).List(options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.NebulaV1().WorkflowRuns(namespace).Watch(options)
			},
		},
		&nebulapuppetcomv1.WorkflowRun{},
		resyncPeriod,
		indexers,
	)
}

func (f *workflowRunInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredWorkflowRunInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *workflowRunInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&nebulapuppetcomv1.WorkflowRun{}, f.defaultInformer)
}

func (f *workflowRunInformer) Lister() v1.WorkflowRunLister {
	return v1.NewWorkflowRunLister(f.Informer().GetIndexer())
}
