/*
Copyright (c) Puppet, Inc.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/puppetlabs/nebula-tasks/pkg/apis/nebula.puppet.com/v1"
	scheme "github.com/puppetlabs/nebula-tasks/pkg/generated/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// WorkflowRunsGetter has a method to return a WorkflowRunInterface.
// A group's client should implement this interface.
type WorkflowRunsGetter interface {
	WorkflowRuns(namespace string) WorkflowRunInterface
}

// WorkflowRunInterface has methods to work with WorkflowRun resources.
type WorkflowRunInterface interface {
	Create(*v1.WorkflowRun) (*v1.WorkflowRun, error)
	Update(*v1.WorkflowRun) (*v1.WorkflowRun, error)
	UpdateStatus(*v1.WorkflowRun) (*v1.WorkflowRun, error)
	Delete(name string, options *metav1.DeleteOptions) error
	DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error
	Get(name string, options metav1.GetOptions) (*v1.WorkflowRun, error)
	List(opts metav1.ListOptions) (*v1.WorkflowRunList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.WorkflowRun, err error)
	WorkflowRunExpansion
}

// workflowRuns implements WorkflowRunInterface
type workflowRuns struct {
	client rest.Interface
	ns     string
}

// newWorkflowRuns returns a WorkflowRuns
func newWorkflowRuns(c *NebulaV1Client, namespace string) *workflowRuns {
	return &workflowRuns{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the workflowRun, and returns the corresponding workflowRun object, and an error if there is any.
func (c *workflowRuns) Get(name string, options metav1.GetOptions) (result *v1.WorkflowRun, err error) {
	result = &v1.WorkflowRun{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("workflowruns").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of WorkflowRuns that match those selectors.
func (c *workflowRuns) List(opts metav1.ListOptions) (result *v1.WorkflowRunList, err error) {
	result = &v1.WorkflowRunList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("workflowruns").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested workflowRuns.
func (c *workflowRuns) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("workflowruns").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a workflowRun and creates it.  Returns the server's representation of the workflowRun, and an error, if there is any.
func (c *workflowRuns) Create(workflowRun *v1.WorkflowRun) (result *v1.WorkflowRun, err error) {
	result = &v1.WorkflowRun{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("workflowruns").
		Body(workflowRun).
		Do().
		Into(result)
	return
}

// Update takes the representation of a workflowRun and updates it. Returns the server's representation of the workflowRun, and an error, if there is any.
func (c *workflowRuns) Update(workflowRun *v1.WorkflowRun) (result *v1.WorkflowRun, err error) {
	result = &v1.WorkflowRun{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("workflowruns").
		Name(workflowRun.Name).
		Body(workflowRun).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *workflowRuns) UpdateStatus(workflowRun *v1.WorkflowRun) (result *v1.WorkflowRun, err error) {
	result = &v1.WorkflowRun{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("workflowruns").
		Name(workflowRun.Name).
		SubResource("status").
		Body(workflowRun).
		Do().
		Into(result)
	return
}

// Delete takes name of the workflowRun and deletes it. Returns an error if one occurs.
func (c *workflowRuns) Delete(name string, options *metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("workflowruns").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *workflowRuns) DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("workflowruns").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched workflowRun.
func (c *workflowRuns) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.WorkflowRun, err error) {
	result = &v1.WorkflowRun{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("workflowruns").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
