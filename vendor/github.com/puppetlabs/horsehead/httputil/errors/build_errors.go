// Package errors contains errors for the domain "lih".
//
// This file is automatically generated by errawr-gen. Do not modify it.
package errors

import (
	errawr "github.com/puppetlabs/errawr-go/v2/pkg/errawr"
	impl "github.com/puppetlabs/errawr-go/v2/pkg/impl"
)

// Error is the type of all errors generated by this package.
type Error interface {
	errawr.Error
}

// External contains methods that can be used externally to help consume errors from this package.
type External struct{}

// API is a singleton instance of the External type.
var API External

// Domain is the general domain in which all errors in this package belong.
var Domain = &impl.ErrorDomain{
	Key:   "lih",
	Title: "Insights HTTP Library",
}

// APISection defines a section of errors with the following scope:
// API errors
var APISection = &impl.ErrorSection{
	Key:   "api",
	Title: "API errors",
}

// APICachedResourceNotAvailableErrorCode is the code for an instance of "cached_resource_not_available_error".
const APICachedResourceNotAvailableErrorCode = "lih_api_cached_resource_not_available_error"

// IsAPICachedResourceNotAvailableError tests whether a given error is an instance of "cached_resource_not_available_error".
func IsAPICachedResourceNotAvailableError(err errawr.Error) bool {
	return err != nil && err.Is(APICachedResourceNotAvailableErrorCode)
}

// IsAPICachedResourceNotAvailableError tests whether a given error is an instance of "cached_resource_not_available_error".
func (External) IsAPICachedResourceNotAvailableError(err errawr.Error) bool {
	return IsAPICachedResourceNotAvailableError(err)
}

// APICachedResourceNotAvailableErrorBuilder is a builder for "cached_resource_not_available_error" errors.
type APICachedResourceNotAvailableErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "cached_resource_not_available_error" from this builder.
func (b *APICachedResourceNotAvailableErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "The resource you requested is not available at the specified cache revision.",
		Technical: "The resource you requested is not available at the specified cache revision.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "cached_resource_not_available_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata: &impl.ErrorMetadata{HTTPErrorMetadata: &impl.HTTPErrorMetadata{
			ErrorHeaders: impl.HTTPErrorMetadataHeaders{},
			ErrorStatus:  416,
		}},
		ErrorSection:     APISection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Cached resource not available",
		Version:          1,
	}
}

// NewAPICachedResourceNotAvailableErrorBuilder creates a new error builder for the code "cached_resource_not_available_error".
func NewAPICachedResourceNotAvailableErrorBuilder() *APICachedResourceNotAvailableErrorBuilder {
	return &APICachedResourceNotAvailableErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewAPICachedResourceNotAvailableError creates a new error with the code "cached_resource_not_available_error".
func NewAPICachedResourceNotAvailableError() Error {
	return NewAPICachedResourceNotAvailableErrorBuilder().Build()
}

// APIResourceModifiedErrorCode is the code for an instance of "resource_modified_error".
const APIResourceModifiedErrorCode = "lih_api_resource_modified_error"

// IsAPIResourceModifiedError tests whether a given error is an instance of "resource_modified_error".
func IsAPIResourceModifiedError(err errawr.Error) bool {
	return err != nil && err.Is(APIResourceModifiedErrorCode)
}

// IsAPIResourceModifiedError tests whether a given error is an instance of "resource_modified_error".
func (External) IsAPIResourceModifiedError(err errawr.Error) bool {
	return IsAPIResourceModifiedError(err)
}

// APIResourceModifiedErrorBuilder is a builder for "resource_modified_error" errors.
type APIResourceModifiedErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "resource_modified_error" from this builder.
func (b *APIResourceModifiedErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "The resource you provided failed to meet the criteria for updating because it has changed.",
		Technical: "The resource you provided failed to meet the criteria for updating because it has changed.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "resource_modified_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata: &impl.ErrorMetadata{HTTPErrorMetadata: &impl.HTTPErrorMetadata{
			ErrorHeaders: impl.HTTPErrorMetadataHeaders{},
			ErrorStatus:  412,
		}},
		ErrorSection:     APISection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Resource modified",
		Version:          1,
	}
}

// NewAPIResourceModifiedErrorBuilder creates a new error builder for the code "resource_modified_error".
func NewAPIResourceModifiedErrorBuilder() *APIResourceModifiedErrorBuilder {
	return &APIResourceModifiedErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewAPIResourceModifiedError creates a new error with the code "resource_modified_error".
func NewAPIResourceModifiedError() Error {
	return NewAPIResourceModifiedErrorBuilder().Build()
}

// APIResourceSerializationErrorCode is the code for an instance of "resource_serialization_error".
const APIResourceSerializationErrorCode = "lih_api_resource_serialization_error"

// IsAPIResourceSerializationError tests whether a given error is an instance of "resource_serialization_error".
func IsAPIResourceSerializationError(err errawr.Error) bool {
	return err != nil && err.Is(APIResourceSerializationErrorCode)
}

// IsAPIResourceSerializationError tests whether a given error is an instance of "resource_serialization_error".
func (External) IsAPIResourceSerializationError(err errawr.Error) bool {
	return IsAPIResourceSerializationError(err)
}

// APIResourceSerializationErrorBuilder is a builder for "resource_serialization_error" errors.
type APIResourceSerializationErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "resource_serialization_error" from this builder.
func (b *APIResourceSerializationErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "The resource you requested could not be serialized for the wire.",
		Technical: "The resource you requested could not be serialized for the wire.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "resource_serialization_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     APISection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Resource serialization error",
		Version:          1,
	}
}

// NewAPIResourceSerializationErrorBuilder creates a new error builder for the code "resource_serialization_error".
func NewAPIResourceSerializationErrorBuilder() *APIResourceSerializationErrorBuilder {
	return &APIResourceSerializationErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewAPIResourceSerializationError creates a new error with the code "resource_serialization_error".
func NewAPIResourceSerializationError() Error {
	return NewAPIResourceSerializationErrorBuilder().Build()
}
