// Package errors contains errors for the domain "hnu".
//
// This file is automatically generated by errawr-gen. Do not modify it.
package errors

import (
	errawr "github.com/puppetlabs/errawr-go/v2/pkg/errawr"
	impl "github.com/puppetlabs/errawr-go/v2/pkg/impl"
)

// Error is the type of all errors generated by this package.
type Error interface {
	errawr.Error
}

// External contains methods that can be used externally to help consume errors from this package.
type External struct{}

// API is a singleton instance of the External type.
var API External

// Domain is the general domain in which all errors in this package belong.
var Domain = &impl.ErrorDomain{
	Key:   "hnu",
	Title: "Horsehead network utilities",
}

// BackoffSection defines a section of errors with the following scope:
// Net util backoff errors
var BackoffSection = &impl.ErrorSection{
	Key:   "backoff",
	Title: "Net util backoff errors",
}

// BackoffContextCancelledErrorCode is the code for an instance of "context_cancelled_error".
const BackoffContextCancelledErrorCode = "hnu_backoff_context_cancelled_error"

// IsBackoffContextCancelledError tests whether a given error is an instance of "context_cancelled_error".
func IsBackoffContextCancelledError(err errawr.Error) bool {
	return err != nil && err.Is(BackoffContextCancelledErrorCode)
}

// IsBackoffContextCancelledError tests whether a given error is an instance of "context_cancelled_error".
func (External) IsBackoffContextCancelledError(err errawr.Error) bool {
	return IsBackoffContextCancelledError(err)
}

// BackoffContextCancelledErrorBuilder is a builder for "context_cancelled_error" errors.
type BackoffContextCancelledErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "context_cancelled_error" from this builder.
func (b *BackoffContextCancelledErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "Context cancelled when attempting to wait for a backoff",
		Technical: "Context cancelled when attempting to wait for a backoff",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "context_cancelled_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     BackoffSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Context cancelled",
		Version:          1,
	}
}

// NewBackoffContextCancelledErrorBuilder creates a new error builder for the code "context_cancelled_error".
func NewBackoffContextCancelledErrorBuilder() *BackoffContextCancelledErrorBuilder {
	return &BackoffContextCancelledErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewBackoffContextCancelledError creates a new error with the code "context_cancelled_error".
func NewBackoffContextCancelledError() Error {
	return NewBackoffContextCancelledErrorBuilder().Build()
}
