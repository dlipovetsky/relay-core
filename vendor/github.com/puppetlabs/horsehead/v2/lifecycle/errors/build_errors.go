// Package errors contains errors for the domain "hlife".
//
// This file is automatically generated by errawr-gen. Do not modify it.
package errors

import (
	errawr "github.com/puppetlabs/errawr-go/v2/pkg/errawr"
	impl "github.com/puppetlabs/errawr-go/v2/pkg/impl"
)

// Error is the type of all errors generated by this package.
type Error interface {
	errawr.Error
}

// External contains methods that can be used externally to help consume errors from this package.
type External struct{}

// API is a singleton instance of the External type.
var API External

// Domain is the general domain in which all errors in this package belong.
var Domain = &impl.ErrorDomain{
	Key:   "hlife",
	Title: "Horsehead lifecycle management",
}

// CloserSection defines a section of errors with the following scope:
// Closer errors
var CloserSection = &impl.ErrorSection{
	Key:   "closer",
	Title: "Closer errors",
}

// CloserErrorCode is the code for an instance of "error".
const CloserErrorCode = "hlife_closer_error"

// IsCloserError tests whether a given error is an instance of "error".
func IsCloserError(err errawr.Error) bool {
	return err != nil && err.Is(CloserErrorCode)
}

// IsCloserError tests whether a given error is an instance of "error".
func (External) IsCloserError(err errawr.Error) bool {
	return IsCloserError(err)
}

// CloserErrorBuilder is a builder for "error" errors.
type CloserErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "error" from this builder.
func (b *CloserErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "An error occurred when closing resources.",
		Technical: "An error occurred when closing resources.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     CloserSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Close error",
		Version:          1,
	}
}

// NewCloserErrorBuilder creates a new error builder for the code "error".
func NewCloserErrorBuilder() *CloserErrorBuilder {
	return &CloserErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewCloserError creates a new error with the code "error".
func NewCloserError() Error {
	return NewCloserErrorBuilder().Build()
}

// CloserPanicErrorCode is the code for an instance of "panic_error".
const CloserPanicErrorCode = "hlife_closer_panic_error"

// IsCloserPanicError tests whether a given error is an instance of "panic_error".
func IsCloserPanicError(err errawr.Error) bool {
	return err != nil && err.Is(CloserPanicErrorCode)
}

// IsCloserPanicError tests whether a given error is an instance of "panic_error".
func (External) IsCloserPanicError(err errawr.Error) bool {
	return IsCloserPanicError(err)
}

// CloserPanicErrorBuilder is a builder for "panic_error" errors.
type CloserPanicErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "panic_error" from this builder.
func (b *CloserPanicErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "An unexpected error occurred when closing resources.",
		Technical: "An unexpected error occurred when closing resources.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "panic_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     CloserSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Panic",
		Version:          1,
	}
}

// NewCloserPanicErrorBuilder creates a new error builder for the code "panic_error".
func NewCloserPanicErrorBuilder() *CloserPanicErrorBuilder {
	return &CloserPanicErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewCloserPanicError creates a new error with the code "panic_error".
func NewCloserPanicError() Error {
	return NewCloserPanicErrorBuilder().Build()
}
