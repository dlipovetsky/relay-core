// Package errors contains errors for the domain "hsch".
//
// This file is automatically generated by errawr-gen. Do not modify it.
package errors

import (
	errawr "github.com/puppetlabs/errawr-go/v2/pkg/errawr"
	impl "github.com/puppetlabs/errawr-go/v2/pkg/impl"
)

// Error is the type of all errors generated by this package.
type Error interface {
	errawr.Error
}

// External contains methods that can be used externally to help consume errors from this package.
type External struct{}

// API is a singleton instance of the External type.
var API External

// Domain is the general domain in which all errors in this package belong.
var Domain = &impl.ErrorDomain{
	Key:   "hsch",
	Title: "Horsehead Scheduler",
}

// LifecycleSection defines a section of errors with the following scope:
// Lifecycle errors
var LifecycleSection = &impl.ErrorSection{
	Key:   "lifecycle",
	Title: "Lifecycle errors",
}

// LifecycleDescriptorErrorCode is the code for an instance of "descriptor_error".
const LifecycleDescriptorErrorCode = "hsch_lifecycle_descriptor_error"

// IsLifecycleDescriptorError tests whether a given error is an instance of "descriptor_error".
func IsLifecycleDescriptorError(err errawr.Error) bool {
	return err != nil && err.Is(LifecycleDescriptorErrorCode)
}

// IsLifecycleDescriptorError tests whether a given error is an instance of "descriptor_error".
func (External) IsLifecycleDescriptorError(err errawr.Error) bool {
	return IsLifecycleDescriptorError(err)
}

// LifecycleDescriptorErrorBuilder is a builder for "descriptor_error" errors.
type LifecycleDescriptorErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "descriptor_error" from this builder.
func (b *LifecycleDescriptorErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "Descriptor {{pre type}} terminated unexpectedly.",
		Technical: "Descriptor {{pre type}} terminated unexpectedly.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "descriptor_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     LifecycleSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Descriptor error",
		Version:          1,
	}
}

// NewLifecycleDescriptorErrorBuilder creates a new error builder for the code "descriptor_error".
func NewLifecycleDescriptorErrorBuilder(type_ string) *LifecycleDescriptorErrorBuilder {
	return &LifecycleDescriptorErrorBuilder{arguments: impl.ErrorArguments{"type": impl.NewErrorArgument(type_, "the type of this descriptor")}}
}

// NewLifecycleDescriptorError creates a new error with the code "descriptor_error".
func NewLifecycleDescriptorError(type_ string) Error {
	return NewLifecycleDescriptorErrorBuilder(type_).Build()
}

// LifecycleProcessErrorCode is the code for an instance of "process_error".
const LifecycleProcessErrorCode = "hsch_lifecycle_process_error"

// IsLifecycleProcessError tests whether a given error is an instance of "process_error".
func IsLifecycleProcessError(err errawr.Error) bool {
	return err != nil && err.Is(LifecycleProcessErrorCode)
}

// IsLifecycleProcessError tests whether a given error is an instance of "process_error".
func (External) IsLifecycleProcessError(err errawr.Error) bool {
	return IsLifecycleProcessError(err)
}

// LifecycleProcessErrorBuilder is a builder for "process_error" errors.
type LifecycleProcessErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "process_error" from this builder.
func (b *LifecycleProcessErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "The process {{quote description}} running under request {{pre request_id}} encountered an unrecoverable error.",
		Technical: "The process {{quote description}} running under request {{pre request_id}} encountered an unrecoverable error.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "process_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     LifecycleSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Process error",
		Version:          1,
	}
}

// NewLifecycleProcessErrorBuilder creates a new error builder for the code "process_error".
func NewLifecycleProcessErrorBuilder(requestID string, description string) *LifecycleProcessErrorBuilder {
	return &LifecycleProcessErrorBuilder{arguments: impl.ErrorArguments{
		"description": impl.NewErrorArgument(description, "the process's description"),
		"request_id":  impl.NewErrorArgument(requestID, "the request identifier generated for the process"),
	}}
}

// NewLifecycleProcessError creates a new error with the code "process_error".
func NewLifecycleProcessError(requestID string, description string) Error {
	return NewLifecycleProcessErrorBuilder(requestID, description).Build()
}

// LifecycleTimeoutErrorCode is the code for an instance of "timeout_error".
const LifecycleTimeoutErrorCode = "hsch_lifecycle_timeout_error"

// IsLifecycleTimeoutError tests whether a given error is an instance of "timeout_error".
func IsLifecycleTimeoutError(err errawr.Error) bool {
	return err != nil && err.Is(LifecycleTimeoutErrorCode)
}

// IsLifecycleTimeoutError tests whether a given error is an instance of "timeout_error".
func (External) IsLifecycleTimeoutError(err errawr.Error) bool {
	return IsLifecycleTimeoutError(err)
}

// LifecycleTimeoutErrorBuilder is a builder for "timeout_error" errors.
type LifecycleTimeoutErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "timeout_error" from this builder.
func (b *LifecycleTimeoutErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "The operation timed out while waiting for tasks to complete.",
		Technical: "The operation timed out while waiting for tasks to complete.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "timeout_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     LifecycleSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Timeout",
		Version:          1,
	}
}

// NewLifecycleTimeoutErrorBuilder creates a new error builder for the code "timeout_error".
func NewLifecycleTimeoutErrorBuilder() *LifecycleTimeoutErrorBuilder {
	return &LifecycleTimeoutErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewLifecycleTimeoutError creates a new error with the code "timeout_error".
func NewLifecycleTimeoutError() Error {
	return NewLifecycleTimeoutErrorBuilder().Build()
}

// ProcessSection defines a section of errors with the following scope:
// Process errors
var ProcessSection = &impl.ErrorSection{
	Key:   "process",
	Title: "Process errors",
}

// ProcessPanicErrorCode is the code for an instance of "panic_error".
const ProcessPanicErrorCode = "hsch_process_panic_error"

// IsProcessPanicError tests whether a given error is an instance of "panic_error".
func IsProcessPanicError(err errawr.Error) bool {
	return err != nil && err.Is(ProcessPanicErrorCode)
}

// IsProcessPanicError tests whether a given error is an instance of "panic_error".
func (External) IsProcessPanicError(err errawr.Error) bool {
	return IsProcessPanicError(err)
}

// ProcessPanicErrorBuilder is a builder for "panic_error" errors.
type ProcessPanicErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "panic_error" from this builder.
func (b *ProcessPanicErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "The process panic()ed.",
		Technical: "The process panic()ed.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "panic_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ProcessSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Panic",
		Version:          1,
	}
}

// NewProcessPanicErrorBuilder creates a new error builder for the code "panic_error".
func NewProcessPanicErrorBuilder() *ProcessPanicErrorBuilder {
	return &ProcessPanicErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewProcessPanicError creates a new error with the code "panic_error".
func NewProcessPanicError() Error {
	return NewProcessPanicErrorBuilder().Build()
}

// RecoveryDescriptorSection defines a section of errors with the following scope:
// Recovery descriptor errors
var RecoveryDescriptorSection = &impl.ErrorSection{
	Key:   "recovery_descriptor",
	Title: "Recovery descriptor errors",
}

// RecoveryDescriptorMaxRetriesReachedCode is the code for an instance of "max_retries_reached".
const RecoveryDescriptorMaxRetriesReachedCode = "hsch_recovery_descriptor_max_retries_reached"

// IsRecoveryDescriptorMaxRetriesReached tests whether a given error is an instance of "max_retries_reached".
func IsRecoveryDescriptorMaxRetriesReached(err errawr.Error) bool {
	return err != nil && err.Is(RecoveryDescriptorMaxRetriesReachedCode)
}

// IsRecoveryDescriptorMaxRetriesReached tests whether a given error is an instance of "max_retries_reached".
func (External) IsRecoveryDescriptorMaxRetriesReached(err errawr.Error) bool {
	return IsRecoveryDescriptorMaxRetriesReached(err)
}

// RecoveryDescriptorMaxRetriesReachedBuilder is a builder for "max_retries_reached" errors.
type RecoveryDescriptorMaxRetriesReachedBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "max_retries_reached" from this builder.
func (b *RecoveryDescriptorMaxRetriesReachedBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "The max retries ({{max_retries}} have been reached.",
		Technical: "The max retries ({{max_retries}} have been reached.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "max_retries_reached",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     RecoveryDescriptorSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Max retries reached",
		Version:          1,
	}
}

// NewRecoveryDescriptorMaxRetriesReachedBuilder creates a new error builder for the code "max_retries_reached".
func NewRecoveryDescriptorMaxRetriesReachedBuilder(maxRetries int64) *RecoveryDescriptorMaxRetriesReachedBuilder {
	return &RecoveryDescriptorMaxRetriesReachedBuilder{arguments: impl.ErrorArguments{"max_retries": impl.NewErrorArgument(maxRetries, "the configured max retries")}}
}

// NewRecoveryDescriptorMaxRetriesReached creates a new error with the code "max_retries_reached".
func NewRecoveryDescriptorMaxRetriesReached(maxRetries int64) Error {
	return NewRecoveryDescriptorMaxRetriesReachedBuilder(maxRetries).Build()
}
