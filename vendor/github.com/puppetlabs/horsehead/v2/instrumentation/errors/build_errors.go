// Package errors contains errors for the domain "hi".
//
// This file is automatically generated by errawr-gen. Do not modify it.
package errors

import (
	errawr "github.com/puppetlabs/errawr-go/v2/pkg/errawr"
	impl "github.com/puppetlabs/errawr-go/v2/pkg/impl"
)

// Error is the type of all errors generated by this package.
type Error interface {
	errawr.Error
}

// External contains methods that can be used externally to help consume errors from this package.
type External struct{}

// API is a singleton instance of the External type.
var API External

// Domain is the general domain in which all errors in this package belong.
var Domain = &impl.ErrorDomain{
	Key:   "hi",
	Title: "Horsehead Instrumentation",
}

// AlertsSection defines a section of errors with the following scope:
// Alerting errors
var AlertsSection = &impl.ErrorSection{
	Key:   "alerts",
	Title: "Alerting errors",
}

// AlertsSentryInitializationErrorCode is the code for an instance of "sentry_initialization_error".
const AlertsSentryInitializationErrorCode = "hi_alerts_sentry_initialization_error"

// IsAlertsSentryInitializationError tests whether a given error is an instance of "sentry_initialization_error".
func IsAlertsSentryInitializationError(err errawr.Error) bool {
	return err != nil && err.Is(AlertsSentryInitializationErrorCode)
}

// IsAlertsSentryInitializationError tests whether a given error is an instance of "sentry_initialization_error".
func (External) IsAlertsSentryInitializationError(err errawr.Error) bool {
	return IsAlertsSentryInitializationError(err)
}

// AlertsSentryInitializationErrorBuilder is a builder for "sentry_initialization_error" errors.
type AlertsSentryInitializationErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "sentry_initialization_error" from this builder.
func (b *AlertsSentryInitializationErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "The Sentry alerting service could not be configured.",
		Technical: "The Sentry alerting service could not be configured.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "sentry_initialization_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     AlertsSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Sentry initialization error",
		Version:          1,
	}
}

// NewAlertsSentryInitializationErrorBuilder creates a new error builder for the code "sentry_initialization_error".
func NewAlertsSentryInitializationErrorBuilder() *AlertsSentryInitializationErrorBuilder {
	return &AlertsSentryInitializationErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewAlertsSentryInitializationError creates a new error with the code "sentry_initialization_error".
func NewAlertsSentryInitializationError() Error {
	return NewAlertsSentryInitializationErrorBuilder().Build()
}

// MetricsSection defines a section of errors with the following scope:
// Metrics errors
var MetricsSection = &impl.ErrorSection{
	Key:   "metrics",
	Title: "Metrics errors",
}

// MetricsNotFoundErrorCode is the code for an instance of "not_found_error".
const MetricsNotFoundErrorCode = "hi_metrics_not_found_error"

// IsMetricsNotFoundError tests whether a given error is an instance of "not_found_error".
func IsMetricsNotFoundError(err errawr.Error) bool {
	return err != nil && err.Is(MetricsNotFoundErrorCode)
}

// IsMetricsNotFoundError tests whether a given error is an instance of "not_found_error".
func (External) IsMetricsNotFoundError(err errawr.Error) bool {
	return IsMetricsNotFoundError(err)
}

// MetricsNotFoundErrorBuilder is a builder for "not_found_error" errors.
type MetricsNotFoundErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "not_found_error" from this builder.
func (b *MetricsNotFoundErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "The metric type {{type}} with name {{name}} was not found",
		Technical: "The metric type {{type}} with name {{name}} was not found",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "not_found_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     MetricsSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Not found error",
		Version:          1,
	}
}

// NewMetricsNotFoundErrorBuilder creates a new error builder for the code "not_found_error".
func NewMetricsNotFoundErrorBuilder(type_ string, name string) *MetricsNotFoundErrorBuilder {
	return &MetricsNotFoundErrorBuilder{arguments: impl.ErrorArguments{
		"name": impl.NewErrorArgument(name, "the name of the metric"),
		"type": impl.NewErrorArgument(type_, "the type of metric"),
	}}
}

// NewMetricsNotFoundError creates a new error with the code "not_found_error".
func NewMetricsNotFoundError(type_ string, name string) Error {
	return NewMetricsNotFoundErrorBuilder(type_, name).Build()
}

// MetricsUnknownErrorCode is the code for an instance of "unknown_error".
const MetricsUnknownErrorCode = "hi_metrics_unknown_error"

// IsMetricsUnknownError tests whether a given error is an instance of "unknown_error".
func IsMetricsUnknownError(err errawr.Error) bool {
	return err != nil && err.Is(MetricsUnknownErrorCode)
}

// IsMetricsUnknownError tests whether a given error is an instance of "unknown_error".
func (External) IsMetricsUnknownError(err errawr.Error) bool {
	return IsMetricsUnknownError(err)
}

// MetricsUnknownErrorBuilder is a builder for "unknown_error" errors.
type MetricsUnknownErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "unknown_error" from this builder.
func (b *MetricsUnknownErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "The backend {{backend}} returned an unknown error",
		Technical: "The backend {{backend}} returned an unknown error",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "unknown_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     MetricsSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Unknown error",
		Version:          1,
	}
}

// NewMetricsUnknownErrorBuilder creates a new error builder for the code "unknown_error".
func NewMetricsUnknownErrorBuilder(backend string) *MetricsUnknownErrorBuilder {
	return &MetricsUnknownErrorBuilder{arguments: impl.ErrorArguments{"backend": impl.NewErrorArgument(backend, "the type of backend")}}
}

// NewMetricsUnknownError creates a new error with the code "unknown_error".
func NewMetricsUnknownError(backend string) Error {
	return NewMetricsUnknownErrorBuilder(backend).Build()
}
